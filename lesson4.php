<?php

//1. Как получить в виде результата все поля из таблицы my_table?

$query = "SELECT * FROM my_table";

//2. Как получить в виде результата только поля name_first, name_last, salary из таблицы employee?

$query = "SELECT name_first,name_last,salary FROM employee";

//3. Задать таблице my_table псевдоним t и вывести всех, у кого salary выше 3800.

$query = "SELECT * FROM my_table t WHERE t.salary > 3800";

//4. Так выбрать страны, из которых поставляют продукцию производители, чтобы страны не повторялись по 2 и более раз.

$query = "SELECT * FROM my_table GROUP BY country";

//5. Вывести все автобусы в порядке уменьшения количества мест.

$query = "SELECT * FROM bus ORDER BY amount DESC";

//6. Перечислить известные агрегирующие функции в MySQL.

//AVG: вычисляет среднее значение
//SUM: вычисляет сумму значений
//MIN: вычисляет наименьшее значение
//MAX: вычисляет наибольшее значение
//COUNT: вычисляет количество строк в запросе

//7. Есть таблица с полями name и id. Нужно вывести имя с наибольшим id, не используя при этом команду MAX.
//Как это можно сделать?

$query = "SELECT `name` FROM my_table ORDER BY id DESC";

//8. Обязательно ли писать команды прописными буквами? Сработает ли запрос, если его написать строчными буквами?

//Работать будет, т.к. команды MySQL регистронезависимы

//9. Что такое SQL-инъекции и как их избегать?

//Цель процесса взлома состоит в том, чтобы обмануть систему сервера при помощи запуска вредоносного кода,
// который в свою очередь способен открыть для взломщика практически любые доступы к сайту и БД

//1. Подготовленные утверждения.
//Запросы с параметрами заставляют разработчиков определять весь код SQL, а затем передавать каждый параметр в запрос,
//что позволяет базе данных различать код и данные независимо от того, какой ввод предоставляется.
//
//2. Экранируйте все данные которые вводит пользователь. Каждая СУБД поддерживает одну или несколько схем
//экранирования символов, специфичных для определенных типов запросов. Если затем вы удалите все введенные
//пользователем данные, используя правильную схему экранирования для используемой базы данных,
//СУБД не будет путать этот ввод с кодом SQL, написанным разработчиком, тем самым избегая любых возможных уязвимостей
//SQL-инъекций.
//На PHP вы можете воспользоваться методом htmlspecialchars который преобразует спец. символы в html сущности.
//
//3. Используйте брандмауэр веб-приложений. Популярным примером является бесплатный модуль с открытым исходным
//кодом ModSecurity, доступный для веб-серверов Apache, Microsoft IIS и nginx. ModSecurity предоставляет сложный и
//постоянно меняющийся набор правил для фильтрации потенциально опасных веб-запросов. Его защита от SQL-инъекций может
//уловить большинство попыток проникнуть через SQL через веб-каналы.
//
//4. Хранимые процедуры . Хранимая процедура определяется и сохраняется в самой базе данных, а затем вызывается из
//приложения, а не того, что пользователю разрешено вводить.
//
//5. Наименьшая привилегия. Минимизация привилегий, назначенных каждой учетной записи базы данных, чтобы пользователи
//имели достаточное разрешение для выполнения своей работы, но не более того.
//
//6. Скрывать сообщения об ошибках. Сообщения об ошибках являются важным средством разведки для злоумышленников,
//поэтому, если это возможно, держите их в логах на сервере. Обязательно отключите в настройках сервера,
//CMS и фреймворка вывод ошибок PHP
//
//7. Использовать современные технологии языка при работе с БД. Это пожалуй самый важный пункт, так же как и п.6, и п.2.
//Всегда при работе с БД не используйте простые PHP запросы к БД. Обязательно запросы должны производиться либо при
//помощи MySQLi или же при помощи PDO. Дело в том, что в обе технологии уже входят защиты от SQL инъекций,
//что создаст для вас дополнительную безопасность БД.
